a - identity(3)
a - identity(1)
identity(1)
a - diag(3)
det(a - diag(3))
?summary()
?summar
?summary
log(.5/(1-.5))
( log(.5/(1-.5)) + 10.6513 )/.0055
exit
exit()
exp(-6 + .05*40 + 1*3.5)/(1 - exp(-6 + .05*40 + 1*3.5))
exp(-6 + .05*40 + 1*3.5)
(1 - exp(-6 + .05*40 + 1*3.5))
exp(-6 + .05*40 + 1*3.5)/(1 + exp(-6 + .05*40 + 1*3.5))
log(.5 / (1 - 0.5)) + 6 - 3.5
(log(.5 / (1 - 0.5)) + 6 - 3.5) / .05
asdf
lkhj
n;lkj
lkjh
kjh
aasdf
asdf
sdf
asdf
qw
qwe
qwer
hjpok
lkjn
jhgf
jgv'
kjhg
jhgf
hjgf
kjhg
kjyg
kjhg
kljh
h;klj
train
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
require(MASS)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket, subset=Year<2005)
lda.fit
summary(lda.fit)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket, subset=Year<2005)
lda.fit
plot(lda.fit)
lda.pred=predict(lda.fit,Smarket.2005)
Smarket.2005=subset(Smarket,Year==2005)
lda.pred=predict(lda.fit,Smarket.2005)
lda.pred
names(lda.pred)
lda.pred$class
lda.pred$posterior
lda.pred$x
lda.pred
lda.pred[,1]
lda.pred$posterior
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
require(ISLR)#
names(Smarket)#
summary(Smarket)#
?Smarket#
pairs(Smarket,col=Smarket$Direction)#
# Logistic regression#
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,#
            data=Smarket,family=binomial)#
summary(glm.fit)#
glm.probs=predict(glm.fit,type="response") #
glm.probs[1:5]#
glm.pred=ifelse(glm.probs>0.5,"Up","Down")#
attach(Smarket)#
table(glm.pred,Direction)#
mean(glm.pred==Direction)#
# Make training and test set#
train = Year<2005#
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,#
            data=Smarket,family=binomial, subset=train)#
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.probs
sd(c(5,8,12))
which.min(c(4,1,6))
309/795
summary(c(1, 2, 3, 4, 5))
WHO
?lm
?glm
?predict
?boot
install.packages('DBI')
install.packages('RMySQL')
library('DBI')#
library('RMySQL')
?cv.glm()
?cv.glm
?loocv
?kmeans
?hclust
rm(list = ls())
load('~/Desktop/Courses/Now/ISL/Lab/ch10/10.R.RData')
load('~/Desktop/Courses/Now/ISL/Lab/~read/ch10/10.R.RData')
X <- rbind(x, x.test)#
pr.out <- prcomp(X, scale = T)#
names(pr.out)#
pr.var <- pr.out$sdev^2#
sum(pr.var[1:5]) / sum(pr.var)
# 2#
dataset <- cbind(y, x)#
pcr.fit <- pcr(y ~ ., data = dataset, scale = T, validation = 'CV')#
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)#
mean((pcr.pred - y.test)^2)
dataset <- cbind(y, x)
pcr.fit <- pcr(y ~ ., data = dataset, scale = T, validation = 'CV')
library(pcr)
lirbary(pls)
library(pls)
dataset <- cbind(y, x)#
pcr.fit <- pcr(y ~ ., data = dataset, scale = T, validation = 'CV')#
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)#
mean((pcr.pred - y.test)^2)
dataset <- cbind(y, x)#
pcr.fit <- lm(y ~ ., data = dataset)#
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)#
mean((pcr.pred - y.test)^2)
rm(list = ls())#
load('~/Desktop/Courses/Now/ISL/Lab/~read/ch10/10.R.RData')#
#
# 1#
X <- rbind(x, x.test)#
pr.out <- prcomp(X, scale = T)#
names(pr.out)#
pr.var <- pr.out$sdev^2#
sum(pr.var[1:5]) / sum(pr.var)#
#
# 2#
dataset <- cbind(y, x)#
pcr.fit <- pcr(y ~ ., data = dataset, scale = T, validation = 'CV')#
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)#
mean((pcr.pred - y.test)^2)#
#
# 3#
dataset <- cbind(y, x)#
pcr.fit <- lm(y ~ ., data = dataset)#
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)#
mean((pcr.pred - y.test)^2)
dataset <- cbind(y, x)#
pcr.fit <- lm(y ~ ., data = dataset, scale = T)#
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)#
mean((pcr.pred - y.test)^2)
?pcr
sqrt(mean((pcr.pred - y.test)^2))
dataset <- cbind(y, x)#
pcr.fit <- lm(y ~ ., data = dataset)#
pcr.pred <- predict(pcr.fit, x.test, ncomp = 4)#
mean((pcr.pred - y.test)^2)
dataset <- cbind(y, scale(x))
pcr.fit <- lm(y ~ ., data = dataset)
dadtaset
dataset
head(dataset)
dataset <- data.frame(cbind(y, scale(x)))
pcr.fit <- pcr(y ~ ., data = dataset, scale = T, validation = 'CV')
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
mean((pcr.pred - y.test)^2)
dataset <- scale(cbind(y, x))
pcr.fit <- pcr(y ~ ., data = dataset, validation = 'CV')
dataset <- data.frame(scale(cbind(y, x)))
pcr.fit <- pcr(y ~ ., data = dataset, validation = 'CV')
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
mean((pcr.pred - y.test)^2)
dataset <- data.frame(scale(cbind(y, x)))
pcr.fit <- pcr(y ~ ., data = dataset)
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
mean((pcr.pred - y.test)^2)
dataset <- data.frame(scale(cbind(y, x)))
pcr.fit <- pcr(y ~ ., data = dataset, scale = TRUE)
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
mean((pcr.pred - y.test)^2)
dataset <- cbind(y, x)
pcr.fit <- pcr(y ~ ., data = dataset, scale = TRUE)
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
mean((pcr.pred - y.test)^2)
y.text
y.test
head(x.test)
pcr.fit
summary(pcr.fit)
sum(13.736 ,24.53, 32.29, 36.09, 37.32)
dataset <- cbind(y, x)
pcr.fit <- pcr(y ~ ., data = dataset, scale = TRUE)
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
mean((pcr.pred - y.test)^2)
dataset <- cbind(y, x)
pcr.fit <- lm(y ~ ., data = dataset)
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
mean((pcr.pred - y.test)^2)
head(pcr.pred)
?predict
dataset <- cbind(y, x)
pcr.fit <- lm(y ~ ., data = dataset)
pcr.pred <- predict(pcr.fit, x.test)
mean((pcr.pred - y.test)^2)
pcr.pred <- predict(pcr.fit, x.test, type = 'response')
mean((pcr.pred - y.test)^2)
3.90714/3.65197
dataset <- cbind(y, x)
pcr.fit <- pcr(y ~ ., data = dataset, scale = TRUE)
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5, type = 'response')
mean((pcr.pred - y.test)^2)
summary(pcr.pred)
pcr.pred
X <- rbind(x, x.test)
pr.out <- prcomp(X, scale = T)
pr.out
names(pr.out)
pr.var <- pr.out$sdev^2
sum(pr.var[1:5]) / sum(pr.var)
head(pr.out)
summary(pr.out)
dim(pr.out)
summary(prout)
summary(pr.out)
head(pr.out)
names(pr.out)
pr.out$center %>% head(20)
pr.out$center
pr.out$scale
pr.out$rotation
dim(x)
dim(pr.out$rotation)
names(pr.out)
Z <- X %*% pr.out$rotation
head(X)
dim(X)
dim(x)
dim(pr.out$rotation)
Z <- X %*% pr.out$rotation
str(X)
search()
install.packages()
installed.packages()
#================================================================================= #
# - installs all the packages in R#
#=================================================================================#
#
packagesList <- (#
  c(#
#
#---------------------------------------------------------------------------------#
# standard packages#
'MASS',  # standard statistical package#
'ElemStatLearn',  # functions and examples from 'ESL'#
'ISLR',  # functions and examples from 'ISL'#
'gcookbook',  # functions and examples from 'R Graphics Cookbook'#
'pryr',  # tools to pry in to R, used with 'Advanced R Programming'#
#
#---------------------------------------------------------------------------------#
# data processing#
'foreign',  # .dbf (read.dbf, read.spss)#
'xlsx',  # .xlsx (read.xlsx)#
'gdata',  # .xls (read.xls)#
'scales',  # allows for $, %, etc.#
'lubridate',  # to allow easier parsing of dates#
#
#---------------------------------------------------------------------------------#
# data manipulation#
'magrittr',  # provides 'pipe'-like operator#
'plyr',  # splitting, applying and combining data#
'data.table',#
'dplyr',  # splitting, applying and combining data, replacing plyr#
'reshape2',  # alternative to reshape(); convert data between wide & long#
'tidyr',  # alternative to reshape2()#
'broom',  # installation: 'devtools); install_github('dgrtwo/broom')#
'abind',  # combines arrays#
#
#---------------------------------------------------------------------------------#
# statistical methods#
#
# math#
'expm',  # matrix exponential#
'Matrix',  # matrix#
#
# plot#
'corrplot',  # correlation plot#
'ROCR',  # # ROCR plot#
#
# methods#
'lasso2',  # the lasso#
'leaps',  # function to find the regression subset#
'class',  # classification#
'boot',  # cross-validation and bootstrap#
'pls',  # PRC#
'glmnet',  # the lasso or elastic-net regularization path#
# 'spline',  # splines#
'gam',  # generalized additive models#
'tree',  # trees#
'randomForest',  # bagging + random forest#
'gbm',  # boosting#
'e1071',  # SVM#
'np',  # kernel smoothing / non-parametric regression#
'PSCBS',  # circular binary segmentation, install the following before#
# source("http://bioconductor.org/biocLite.R")#
# biocLite("DNAcopy")#
'nlme',  # generalized least square'#
'bcp',  # bayesian changepoint model#
#
# distributions#
'evd',  # extreme value distribution#
'mnormt',  # multivariate t-distribution#
'truncnorm',  # truncated normal distribution#
'VGAM',  # Rayleigh distribution#
#
# time series#
'astsa',  # applied statistical time series analysis#
'forecast',  # forecasting functions for time series & linear models#
#
# bayesian#
'bayesm',  # by Peter Rossi, from 'Bayesian Statistics and Marketing'#
'MCMCpack',  # a variant#
#
#---------------------------------------------------------------------------------#
# graphics#
#
# framework#
'ggplot2',  # ggplot2.org/book#
'ggsubplot',  # facilitate embedded plots through ggplot2#
'ggvis',  # web-interactive graphics, used with shiny: ggvis.rstudio.com#
'shiny',  # web-application framework for R: shiny.rstudio.com#
'gridExtra',  # plot multiple ggplot2 plots in a grid#
#
# specific plots#
'gplots',  # a variant#
'igraph',  # network#
'rgl',  # 3D graphics#
'vcd',  # mosaic#
#
# fonts#
'extrafont',#
# load fonts: loadfonts()#
# import all fonts: font_import()#
# list all the fonts: fonts()#
#
#---------------------------------------------------------------------------------#
# string manipulation#
'stringr', #
#
#---------------------------------------------------------------------------------#
# GIS#
'maptools',  # reading and handling spatial objects#
#
#---------------------------------------------------------------------------------#
# markdown#
# 'pandoc#
'knitr', #
'rmarkdown',  # rmarkdown.rstudio.com#
#
#---------------------------------------------------------------------------------#
# SQL#
'DBI',#
'RMySQL',#
#
#---------------------------------------------------------------------------------#
# package development#
'devtools',#
'roxygen2'#
#
  )#
)
packagesList
#================================================================================= #
# - list of packages in R#
#=================================================================================#
#
packagesList <- (#
  c(#
#
#---------------------------------------------------------------------------------#
# standard packages#
'MASS',  # standard statistical package#
'ElemStatLearn',  # functions and examples from 'ESL'#
'ISLR',  # functions and examples from 'ISL'#
'gcookbook',  # functions and examples from 'R Graphics Cookbook'#
'pryr',  # tools to pry in to R, used with 'Advanced R Programming'#
#
#---------------------------------------------------------------------------------#
# data processing#
'foreign',  # .dbf (read.dbf, read.spss)#
'xlsx',  # .xlsx (read.xlsx)#
'gdata',  # .xls (read.xls)#
'scales',  # allows for $, %, etc.#
'lubridate',  # to allow easier parsing of dates#
#
#---------------------------------------------------------------------------------#
# data manipulation#
'magrittr',  # provides 'pipe'-like operator#
'plyr',  # splitting, applying and combining data#
'data.table',#
'dplyr',  # splitting, applying and combining data, replacing plyr#
'reshape2',  # alternative to reshape(); convert data between wide & long#
'tidyr',  # alternative to reshape2()#
'broom',  # installation: 'devtools); install_github('dgrtwo/broom')#
'abind',  # combines arrays#
#
#---------------------------------------------------------------------------------#
# statistical methods#
#
# math#
'expm',  # matrix exponential#
'Matrix',  # matrix#
#
# plot#
'corrplot',  # correlation plot#
'ROCR',  # # ROCR plot#
#
# methods#
'lasso2',  # the lasso#
'leaps',  # function to find the regression subset#
'class',  # classification#
'boot',  # cross-validation and bootstrap#
'pls',  # PRC#
'glmnet',  # the lasso or elastic-net regularization path#
# 'spline',  # splines#
'gam',  # generalized additive models#
'tree',  # trees#
'randomForest',  # bagging + random forest#
'gbm',  # boosting#
'e1071',  # SVM#
'np',  # kernel smoothing / non-parametric regression#
'PSCBS',  # circular binary segmentation, install the following before#
# source("http://bioconductor.org/biocLite.R")#
# biocLite("DNAcopy")#
'nlme',  # generalized least square'#
'bcp',  # bayesian changepoint model#
#
# distributions#
'evd',  # extreme value distribution#
'mnormt',  # multivariate t-distribution#
'truncnorm',  # truncated normal distribution#
'VGAM',  # Rayleigh distribution#
#
# time series#
'astsa',  # applied statistical time series analysis#
'forecast',  # forecasting functions for time series & linear models#
#
# bayesian#
'bayesm',  # by Peter Rossi, from 'Bayesian Statistics and Marketing'#
'MCMCpack',  # a variant#
#
#---------------------------------------------------------------------------------#
# graphics#
#
# framework#
'ggplot2',  # ggplot2.org/book#
'ggsubplot',  # facilitate embedded plots through ggplot2#
'ggvis',  # web-interactive graphics, used with shiny: ggvis.rstudio.com#
'shiny',  # web-application framework for R: shiny.rstudio.com#
'gridExtra',  # plot multiple ggplot2 plots in a grid#
#
# specific plots#
'gplots',  # a variant#
'igraph',  # network#
'rgl',  # 3D graphics#
'vcd',  # mosaic#
#
# fonts#
'extrafont',#
# load fonts: loadfonts()#
# import all fonts: font_import()#
# list all the fonts: fonts()#
#
#---------------------------------------------------------------------------------#
# string manipulation#
'stringr', #
#
#---------------------------------------------------------------------------------#
# GIS#
'maptools',  # reading and handling spatial objects#
#
#---------------------------------------------------------------------------------#
# markdown#
# 'pandoc#
'knitr', #
'rmarkdown',  # rmarkdown.rstudio.com#
#
#---------------------------------------------------------------------------------#
# SQL#
'DBI',#
'RMySQL',#
#
#---------------------------------------------------------------------------------#
# package development#
'devtools',#
'roxygen2'#
#
  )#
)#
#
#================================================================================= #
# - installs all of above in R#
#=================================================================================#
#
for (i in 1:length(packagesList)) {#
    if (!(packagesList[i] %in% rownames(installed.packages()))) { #
        install.packages(packagesList[i]) #
    }#
}
#================================================================================= #
# - list of packages in R#
#=================================================================================#
#
packagesList <- (#
  c(#
#
#---------------------------------------------------------------------------------#
# standard packages#
'MASS',  # standard statistical package#
'ElemStatLearn',  # functions and examples from 'ESL'#
'ISLR',  # functions and examples from 'ISL'#
'gcookbook',  # functions and examples from 'R Graphics Cookbook'#
'pryr',  # tools to pry in to R, used with 'Advanced R Programming'#
#
#---------------------------------------------------------------------------------#
# data processing#
'foreign',  # .dbf (read.dbf, read.spss)#
'xlsx',  # .xlsx (read.xlsx)#
'gdata',  # .xls (read.xls)#
'scales',  # allows for $, %, etc.#
'lubridate',  # to allow easier parsing of dates#
#
#---------------------------------------------------------------------------------#
# data manipulation#
'magrittr',  # provides 'pipe'-like operator#
'plyr',  # splitting, applying and combining data#
'data.table',#
'dplyr',  # splitting, applying and combining data, replacing plyr#
'reshape2',  # alternative to reshape(); convert data between wide & long#
'tidyr',  # alternative to reshape2()#
'broom',  # installation: 'devtools); install_github('dgrtwo/broom')#
'abind',  # combines arrays#
#
#---------------------------------------------------------------------------------#
# statistical methods#
#
# math#
'expm',  # matrix exponential#
'Matrix',  # matrix#
#
# plot#
'corrplot',  # correlation plot#
'ROCR',  # # ROCR plot#
#
# methods#
'lasso2',  # the lasso#
'leaps',  # function to find the regression subset#
'class',  # classification#
'boot',  # cross-validation and bootstrap#
'pls',  # PRC#
'glmnet',  # the lasso or elastic-net regularization path#
# 'spline',  # splines#
'gam',  # generalized additive models#
'tree',  # trees#
'randomForest',  # bagging + random forest#
'gbm',  # boosting#
'e1071',  # SVM#
'np',  # kernel smoothing / non-parametric regression#
'PSCBS',  # circular binary segmentation, install the following before#
# source("http://bioconductor.org/biocLite.R")#
# biocLite("DNAcopy")#
'nlme',  # generalized least square'#
'bcp',  # bayesian changepoint model#
#
# distributions#
'evd',  # extreme value distribution#
'mnormt',  # multivariate t-distribution#
'truncnorm',  # truncated normal distribution#
'VGAM',  # Rayleigh distribution#
#
# time series#
'astsa',  # applied statistical time series analysis#
'forecast',  # forecasting functions for time series & linear models#
#
# bayesian#
'bayesm',  # by Peter Rossi, from 'Bayesian Statistics and Marketing'#
'MCMCpack',  # a variant#
#
# h2o#
'h2o',#
#
#---------------------------------------------------------------------------------#
# graphics#
#
# framework#
'ggplot2',  # ggplot2.org/book#
'ggsubplot',  # facilitate embedded plots through ggplot2#
'ggvis',  # web-interactive graphics, used with shiny: ggvis.rstudio.com#
'shiny',  # web-application framework for R: shiny.rstudio.com#
'gridExtra',  # plot multiple ggplot2 plots in a grid#
#
# specific plots#
'gplots',  # a variant#
'igraph',  # network#
'rgl',  # 3D graphics#
'vcd',  # mosaic#
#
# fonts#
'extrafont',#
# load fonts: loadfonts()#
# import all fonts: font_import()#
# list all the fonts: fonts()#
#
#---------------------------------------------------------------------------------#
# string manipulation#
'stringr', #
#
#---------------------------------------------------------------------------------#
# GIS#
'maptools',  # reading and handling spatial objects#
#
#---------------------------------------------------------------------------------#
# markdown#
# 'pandoc#
'knitr', #
'rmarkdown',  # rmarkdown.rstudio.com#
#
#---------------------------------------------------------------------------------#
# SQL#
'DBI',#
'RMySQL',#
#
#---------------------------------------------------------------------------------#
# package development#
'devtools',#
'roxygen2'#
#
  )#
)#
#
#================================================================================= #
# - installs all of above in R#
#=================================================================================#
#
for (i in 1:length(packagesList)) {#
    if (!(packagesList[i] %in% rownames(installed.packages()))) { #
        install.packages(packagesList[i]) #
    }#
}
quite
quit
?str_split_fixed()
werasdf
asdf
sadf
asd
f
asdf
d
fa
sdf
a
sdf
as
f
asd
f
asdf
library('stringr')
?str_split_fixed()
library('stringr')
fruits <- c(#
  "apples and oranges and pears and bananas",#
  "pineapples and mangos and guavas"#
)#
str_split_fixed(fruits, " and ", 3)#
str_split_fixed(fruits, " and ", 4)
fruits <- c(#
  "apples and oranges and pears and bananas",#
  "pineapples and mangos and guavas"#
)#
str_split(fruits, " and ", 3)#
str_split(fruits, " and ", 4)
fruits <- c(#
  "apples and oranges and pears and bananas",#
  "pineapples and mangos and guavas"#
)#
str_split(fruits, " and ")#
str_split(fruits, " and ")
260*.74
260*.74/1164
(260*.74 - 10)/1164
(260*.74 - 50)/1164
110/(1.0875^3)
81*1.0875
81*1.0875^2
81*1.1^2
81*1.15^2
update.packages('ggplot2')
#=================================================================================#
# preloads essential libraries to the current directory#
#=================================================================================#
#
library(MASS)  # standard statistical package
library(scales)  # allows for $, %, etc.
library(readr)  # alternative ways to load data
install.packages(readr)
install.packages('readr')
install.packages('tidry')
install.packages('tidyr')
install.packages('dplyr')
install.packages('ggplot2')
install.packages('stringr')
install.packages('caret')
getwd('')
setwd ('~/Desktop/Analytics/Statistics_Canada/')
runApp('GDP_dygraphs')
library(shiny)
runApp('GDP_dygraphs')
